local status, saga = pcall(require, "lspsaga")
if (not status) then return end

saga.setup({
  ui = {
    title = false,
    border = 'solid',
    winblend = 12,
    kind = {
      Folder = { '' },
      File = { 'Ôúò ', "@comment" },
      Module = { 'Óò§ ', "@comment" },
      Namespace = { 'Ô§ê', "@comment" },
      Package = { 'Ô£ï ', "@comment" },
      Class = { 'Ô†ñ ', "@comment" },
      Method = { 'Ô•≠', "@comment" },
      Property = { 'Ôö¶  ', "@comment" },
      Field = { 'ÓÆÖ', "@comment" },
      Constructor = { 'Ôê•', "@comment" },
      Enum = { 'Ô¶∫', "@comment" },
      Interface = { 'Ô®Ç', "@comment" },
      Function = { 'ùù∫ ', "@comment" },
      Variable = { 'Ô§ó ', "@comment" },
      Constant = { 'Ô´è', "@comment" },
      String = { ' ', "@comment" },
      Number = { 'Ô¢ü ', "@comment" },
      Boolean = { 'Óû© ', "@comment" },
      Array = { 'ÔÄ∫  ', "@comment" },
      Object = { 'Ôö¶ ', "@comment" },
      Key = { 'Ô†ä  ', "@comment" },
      Null = { 'ÔåÖ ', "@comment" },
      EnumMember = { 'Ô§è', "@comment" },
      Struct = { 'Ô§£', "@comment" },
      Event = { 'Ô§∫', "@comment" },
      Operator = { 'Ôöî ', "@comment" },
      TypeParameter = { 'Ó™í  ', "@comment" },
      -- ccls
      TypeAlias = { 'Ôßº', "@comment" },
      Parameter = { 'ÓØ• ', "@comment" },
      StaticMethod = { 'Ô¥Ç ', "@comment" },
      Macro = { 'ÔÑ∂ ', "@comment" },
      -- for completion sb microsoft!!!
      Text = { 'ÔûÉ', "@comment" },
      Snippet = { 'ÔÑ° ', "@comment" },
      Unit = { 'Ô§º', "@comment" },
      Value = { 'Ó™à ', "@comment" },
      -- extra stuff I've found
      --FolderName = { '  ', colors.blue },
      -- Word = { '  ', colors.blue },
    }
  },
  symbol_in_winbar = {
    enable = false,
    separator = ' ‚ü© ',
    hide_keyword = true,
    show_file = true,
    folder_level = 4,
    respect_root = false,
    color_mode = false,
    delay = 600,
  },
  outline = {
    win_position = 'right',
    win_with = '',
    win_width = 30,
    show_detail = true,
    auto_preview = true,
    auto_refresh = true,
    auto_close = true,
    custom_sort = nil,
    keys = {
      jump = 'o',
      expand_collapse = 'u',
      quit = 'q',
    },
  },
  lightbulb = {
    enable = false,
    enable_in_insert = false,
    sign = false,
    sign_priority = 40,
    virtual_text = false,
  },
  diagnostic = {
    on_insert = false,
    on_insert_follow = false,
  },
})

-- saga.init_lsp_saga {
--   server_filetype_map = {
--     typescript = 'typescript'
--   }
-- }

local opts = { noremap = true, silent = true }
vim.keymap.set('n', '<C-j>', '<Cmd>Lspsaga diagnostic_jump_next<CR>', opts)
vim.keymap.set('n', '<C-h>', '<Cmd>Lspsaga show_line_diagnostics<CR>', opts)
vim.keymap.set('n', 'K', '<Cmd>Lspsaga hover_doc<CR>', opts)
-- vim.keymap.set('i', '<C-k>', '<Cmd>Lspsaga signature_help<CR>', opts)
vim.keymap.set('i', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
vim.keymap.set('n', 'gp', '<Cmd>Lspsaga peek_definition<CR>', opts)
vim.keymap.set('n', 'gr', '<Cmd>Lspsaga rename<CR>', opts)
vim.keymap.set('n', '<leader>w', '<Cmd>Lspsaga winbar_toggle<CR>', opts)

-- code action
local codeaction = require("lspsaga.codeaction")
vim.keymap.set("n", "<leader>ca", function() codeaction:code_action() end, { silent = true })
vim.keymap.set("v", "<leader>ca", function()
  vim.fn.feedkeys(vim.api.nvim_replace_termcodes("<C-U>", true, false, true))
  codeaction:range_code_action()
end, { silent = true })
